// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: TSh3EdI_wt
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: gM35gl7eyM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicUploadAvatar.module.css"; // plasmic-import: TSh3EdI_wt/css
import SpinnerIcon from "./icons/PlasmicIcon__Spinner"; // plasmic-import: bYPm1zrvu/icon

export const PlasmicUploadAvatar__VariantProps = new Array(
  "uploading",
  "isError"
);

export const PlasmicUploadAvatar__ArgProps = new Array("errorMessage", "url");

function PlasmicUploadAvatar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootuploading]: hasVariant(variants, "uploading", "uploading") }
      )}
    >
      {(hasVariant(variants, "uploading", "uploading") ? true : true) ? (
        <Avatar
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames("__wab_instance", sty.avatar, {
            [sty.avatarisError]: hasVariant(variants, "isError", "isError"),
            [sty.avataruploading]: hasVariant(
              variants,
              "uploading",
              "uploading"
            )
          })}
          fullWidth={true}
        />
      ) : null}
      {(hasVariant(variants, "uploading", "uploading") ? true : true) ? (
        <SpinnerIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svguploading]: hasVariant(variants, "uploading", "uploading")
          })}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "isError", "isError") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisError]: hasVariant(variants, "isError", "isError")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.errorMessage,
            className: classNames(sty.slotTargetErrorMessage, {
              [sty.slotTargetErrorMessageisError]: hasVariant(
                variants,
                "isError",
                "isError"
              )
            })
          })}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar", "svg", "freeBox"],
  avatar: ["avatar"],
  svg: ["svg"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUploadAvatar__ArgProps,
      internalVariantPropNames: PlasmicUploadAvatar__VariantProps
    });

    return PlasmicUploadAvatar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUploadAvatar";
  } else {
    func.displayName = `PlasmicUploadAvatar.${nodeName}`;
  }
  return func;
}

export const PlasmicUploadAvatar = Object.assign(
  // Top-level PlasmicUploadAvatar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicUploadAvatar
    internalVariantProps: PlasmicUploadAvatar__VariantProps,
    internalArgProps: PlasmicUploadAvatar__ArgProps
  }
);

export default PlasmicUploadAvatar;
/* prettier-ignore-end */
