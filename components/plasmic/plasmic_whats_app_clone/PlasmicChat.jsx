// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: InV2-Ayo-B
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: gM35gl7eyM/component
import ChatMessage from "../../ChatMessage"; // plasmic-import: _Bch9VQnC0/component
import TextInput from "../../TextInput"; // plasmic-import: 6jNi7LUNkWm/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicChat.module.css"; // plasmic-import: InV2-Ayo-B/css

export const PlasmicChat__VariantProps = new Array("isEmpty");

export const PlasmicChat__ArgProps = new Array("roomName", "roomAvatarUrl");

function PlasmicChat__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisEmpty]: hasVariant(variants, "isEmpty", "isEmpty") }
      )}
    >
      {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          hasGap={true}
          className={classNames(projectcss.all, sty.header, {
            [sty.headerisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
          })}
        >
          <Avatar
            data-plasmic-name={"roomAvatar"}
            data-plasmic-override={overrides.roomAvatar}
            className={classNames("__wab_instance", sty.roomAvatar)}
            color={"_3"}
            isEmpty={true}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qYx)}>
              <div className={classNames(projectcss.all, sty.freeBox__aS3OG)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Chat Name",
                  value: args.roomName,
                  className: classNames(sty.slotTargetRoomName)
                })}
              </div>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          hasGap={true}
          className={classNames(projectcss.all, sty.body, {
            [sty.bodyisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
          })}
        >
          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__cojlF)}
            message={"Hello There!"}
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__ax2Bf)}
            message={
              "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis"
            }
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__zB7H)}
            isSend={true}
            message={"Hey!! :wave:"}
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__zpvpN)}
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__vjlm9)}
            isSend={true}
            message={
              "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis"
            }
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__stfRr)}
            isSend={true}
            message={
              "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis"
            }
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__cJwfj)}
            isSend={true}
            message={
              "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis"
            }
          />

          <ChatMessage
            className={classNames("__wab_instance", sty.chatMessage__h9Wzs)}
            isSend={true}
            message={
              "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis"
            }
          />
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          hasGap={true}
          className={classNames(projectcss.all, sty.footer, {
            [sty.footerisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
          })}
        >
          <TextInput
            data-plasmic-name={"messageInput"}
            data-plasmic-override={overrides.messageInput}
            className={classNames("__wab_instance", sty.messageInput)}
          />

          <p.PlasmicImg
            data-plasmic-name={"sendButton"}
            data-plasmic-override={overrides.sendButton}
            alt={""}
            className={classNames(sty.sendButton)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/plasmic_whats_app_clone/images/sendpng.png",
              fullWidth: 32,
              fullHeight: 32,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__v0KA3, {
            [sty.freeBoxisEmpty__v0KA3VTt12]: hasVariant(
              variants,
              "isEmpty",
              "isEmpty"
            )
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              { [sty.textisEmpty]: hasVariant(variants, "isEmpty", "isEmpty") }
            )}
          >
            {"Please select a chat room"}
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "roomAvatar",
    "body",
    "footer",
    "messageInput",
    "sendButton",
    "text"
  ],

  header: ["header", "roomAvatar"],
  roomAvatar: ["roomAvatar"],
  body: ["body"],
  footer: ["footer", "messageInput", "sendButton"],
  messageInput: ["messageInput"],
  sendButton: ["sendButton"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChat__ArgProps,
      internalVariantPropNames: PlasmicChat__VariantProps
    });

    return PlasmicChat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChat";
  } else {
    func.displayName = `PlasmicChat.${nodeName}`;
  }
  return func;
}

export const PlasmicChat = Object.assign(
  // Top-level PlasmicChat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    roomAvatar: makeNodeComponent("roomAvatar"),
    body: makeNodeComponent("body"),
    footer: makeNodeComponent("footer"),
    messageInput: makeNodeComponent("messageInput"),
    sendButton: makeNodeComponent("sendButton"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicChat
    internalVariantProps: PlasmicChat__VariantProps,
    internalArgProps: PlasmicChat__ArgProps
  }
);

export default PlasmicChat;
/* prettier-ignore-end */
