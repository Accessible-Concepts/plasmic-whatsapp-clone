// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: 3EZolvVuQD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import UploadAvatar from "../../UploadAvatar"; // plasmic-import: TSh3EdI_wt/component
import TextInput from "../../TextInput"; // plasmic-import: 6jNi7LUNkWm/component
import Button from "../../Button"; // plasmic-import: xYVXj1SpLX8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicUserProfile.module.css"; // plasmic-import: 3EZolvVuQD/css
import SpinnerIcon from "./icons/PlasmicIcon__Spinner"; // plasmic-import: bYPm1zrvu/icon

export const PlasmicUserProfile__VariantProps = new Array("isError");

export const PlasmicUserProfile__ArgProps = new Array("errorMessage");

function PlasmicUserProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h3
        data-plasmic-name={"h3"}
        data-plasmic-override={overrides.h3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3
        )}
      >
        {"User Profile"}
      </h3>

      <UploadAvatar
        data-plasmic-name={"uploadAvatar"}
        data-plasmic-override={overrides.uploadAvatar}
        className={classNames("__wab_instance", sty.uploadAvatar)}
      />

      {true ? (
        <SpinnerIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      ) : null}

      <TextInput
        data-plasmic-name={"firstNameInput"}
        data-plasmic-override={overrides.firstNameInput}
        className={classNames("__wab_instance", sty.firstNameInput, {
          [sty.firstNameInputisError]: hasVariant(
            variants,
            "isError",
            "isError"
          )
        })}
        placeholder={"First Name"}
      />

      <TextInput
        data-plasmic-name={"lastNameInput"}
        data-plasmic-override={overrides.lastNameInput}
        className={classNames("__wab_instance", sty.lastNameInput)}
        placeholder={"Last Name"}
      />

      <Button
        data-plasmic-name={"updateProfileButton"}
        data-plasmic-override={overrides.updateProfileButton}
        className={classNames("__wab_instance", sty.updateProfileButton)}
        color={"green"}
      >
        {"Update Profile"}
      </Button>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={"link"}
        link={"/"}
      >
        {"Let's Chat!!!!"}
      </Button>

      {(hasVariant(variants, "isError", "isError") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__hzkFy, {
            [sty.freeBoxisError__hzkFyficjK]: hasVariant(
              variants,
              "isError",
              "isError"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__v5Cln, {
              [sty.freeBoxisError__v5ClNficjK]: hasVariant(
                variants,
                "isError",
                "isError"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Upload Error!",
              value: args.errorMessage,
              className: classNames(sty.slotTargetErrorMessage, {
                [sty.slotTargetErrorMessageisError]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                )
              })
            })}
          </div>
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h3",
    "uploadAvatar",
    "svg",
    "firstNameInput",
    "lastNameInput",
    "updateProfileButton",
    "button"
  ],

  h3: ["h3"],
  uploadAvatar: ["uploadAvatar"],
  svg: ["svg"],
  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  updateProfileButton: ["updateProfileButton"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUserProfile__ArgProps,
      internalVariantPropNames: PlasmicUserProfile__VariantProps
    });

    return PlasmicUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserProfile";
  } else {
    func.displayName = `PlasmicUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicUserProfile = Object.assign(
  // Top-level PlasmicUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    uploadAvatar: makeNodeComponent("uploadAvatar"),
    svg: makeNodeComponent("svg"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    updateProfileButton: makeNodeComponent("updateProfileButton"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicUserProfile
    internalVariantProps: PlasmicUserProfile__VariantProps,
    internalArgProps: PlasmicUserProfile__ArgProps
  }
);

export default PlasmicUserProfile;
/* prettier-ignore-end */
