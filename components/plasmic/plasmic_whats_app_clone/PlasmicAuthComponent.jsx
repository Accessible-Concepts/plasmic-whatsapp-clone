// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: OD67Po_EsQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 6jNi7LUNkWm/component
import Button from "../../Button"; // plasmic-import: xYVXj1SpLX8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: OD67Po_EsQ/css
import SpinnerIcon from "./icons/PlasmicIcon__Spinner"; // plasmic-import: bYPm1zrvu/icon

export const PlasmicAuthComponent__VariantProps = new Array(
  "isSignUpFlow",
  "isLoading",
  "isError"
);

export const PlasmicAuthComponent__ArgProps = new Array("errorMessage");

function PlasmicAuthComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisError]: hasVariant(variants, "isError", "isError"),
          [sty.rootisLoading]: hasVariant(variants, "isLoading", "isLoading")
        }
      )}
    >
      <h3
        data-plasmic-name={"h3"}
        data-plasmic-override={overrides.h3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3
        )}
      >
        {"Plasmic WhatsApp Clone"}
      </h3>

      {(hasVariant(variants, "isError", "isError") ? true : true) ? (
        <div
          data-plasmic-name={"errorWrapper"}
          data-plasmic-override={overrides.errorWrapper}
          className={classNames(projectcss.all, sty.errorWrapper, {
            [sty.errorWrapperisError]: hasVariant(
              variants,
              "isError",
              "isError"
            )
          })}
        >
          {(hasVariant(variants, "isError", "isError") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__g1KtC, {
                [sty.freeBoxisError__g1KtC75NMg]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.errorMessage,
                className: classNames(sty.slotTargetErrorMessage, {
                  [sty.slotTargetErrorMessageisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  )
                })
              })}
            </div>
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"fields"}
        data-plasmic-override={overrides.fields}
        hasGap={true}
        className={classNames(projectcss.all, sty.fields)}
      >
        <TextInput
          data-plasmic-name={"emailInput"}
          data-plasmic-override={overrides.emailInput}
          className={classNames("__wab_instance", sty.emailInput)}
          placeholder={"Email"}
          type={"text"}
        />

        <TextInput
          data-plasmic-name={"passwordInput"}
          data-plasmic-override={overrides.passwordInput}
          className={classNames("__wab_instance", sty.passwordInput)}
          placeholder={"Password"}
          type={"password"}
        />
      </p.Stack>

      <div
        data-plasmic-name={"actions"}
        data-plasmic-override={overrides.actions}
        className={classNames(projectcss.all, sty.actions, {
          [sty.actionsisLoading]: hasVariant(variants, "isLoading", "isLoading")
        })}
      >
        {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton, {
              [sty.submitButtonisError]: hasVariant(
                variants,
                "isError",
                "isError"
              ),

              [sty.submitButtonisLoading]: hasVariant(
                variants,
                "isLoading",
                "isLoading"
              ),

              [sty.submitButtonisSignUpFlow]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            color={"green"}
          >
            {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
              ? "Sign Up"
              : "LOGIN"}
          </Button>
        ) : null}
        {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
          <SpinnerIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgisLoading]: hasVariant(variants, "isLoading", "isLoading")
            })}
            role={"img"}
          />
        ) : null}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__xXhEh, {
          [sty.freeBoxisSignUpFlow__xXhEh53Mb2]: hasVariant(
            variants,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yLk0E,
            {
              [sty.textisSignUpFlow__yLk0E53Mb2]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            }
          )}
        >
          {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
            ? "Already have an account?"
            : "Don't have an account?"}
        </div>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button, {
            [sty.buttonisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
          color={"link"}
          link={
            hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
              ? "/login"
              : "/signup"
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ktHd,
              {
                [sty.textisSignUpFlow__ktHd53Mb2]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
              ? "Login Here"
              : "Sign Up Here"}
          </div>
        </Button>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h3",
    "errorWrapper",
    "fields",
    "emailInput",
    "passwordInput",
    "actions",
    "submitButton",
    "svg",
    "button"
  ],

  h3: ["h3"],
  errorWrapper: ["errorWrapper"],
  fields: ["fields", "emailInput", "passwordInput"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  actions: ["actions", "submitButton", "svg"],
  submitButton: ["submitButton"],
  svg: ["svg"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAuthComponent__ArgProps,
      internalVariantPropNames: PlasmicAuthComponent__VariantProps
    });

    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    errorWrapper: makeNodeComponent("errorWrapper"),
    fields: makeNodeComponent("fields"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    actions: makeNodeComponent("actions"),
    submitButton: makeNodeComponent("submitButton"),
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
