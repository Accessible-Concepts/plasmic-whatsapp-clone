// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: _Bch9VQnC0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: gM35gl7eyM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicChatMessage.module.css"; // plasmic-import: _Bch9VQnC0/css
import TimeSvgrepoComsvgIcon from "./icons/PlasmicIcon__TimeSvgrepoComsvg"; // plasmic-import: jJx-M8BeGZ/icon

export const PlasmicChatMessage__VariantProps = new Array("isSend");

export const PlasmicChatMessage__ArgProps = new Array(
  "message",
  "createdAt",
  "username"
);

function PlasmicChatMessage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisSend]: hasVariant(variants, "isSend", "isSend") }
      )}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
        fullWidth={true}
      />

      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__e9KDv, {
            [sty.freeBoxisSend__e9KDvj3Pkn]: hasVariant(
              variants,
              "isSend",
              "isSend"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__a9XKn, {
              [sty.freeBoxisSend__a9XKnj3Pkn]: hasVariant(
                variants,
                "isSend",
                "isSend"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "username",
              value: args.username,
              className: classNames(sty.slotTargetUsername, {
                [sty.slotTargetUsernameisSend]: hasVariant(
                  variants,
                  "isSend",
                  "isSend"
                )
              })
            })}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__fSykl, {
              [sty.freeBoxisSend__fSyklj3Pkn]: hasVariant(
                variants,
                "isSend",
                "isSend"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "First Commit",
              value: args.message,
              className: classNames(sty.slotTargetMessage, {
                [sty.slotTargetMessageisSend]: hasVariant(
                  variants,
                  "isSend",
                  "isSend"
                )
              })
            })}

            <div
              className={classNames(projectcss.all, sty.freeBox__fQwB0, {
                [sty.freeBoxisSend__fQwB0J3Pkn]: hasVariant(
                  variants,
                  "isSend",
                  "isSend"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0AjBd, {
                  [sty.freeBoxisSend___0AjBdj3Pkn]: hasVariant(
                    variants,
                    "isSend",
                    "isSend"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Time",
                  value: args.createdAt,
                  className: classNames(sty.slotTargetCreatedAt, {
                    [sty.slotTargetCreatedAtisSend]: hasVariant(
                      variants,
                      "isSend",
                      "isSend"
                    )
                  })
                })}

                {(hasVariant(variants, "isSend", "isSend") ? true : true) ? (
                  <TimeSvgrepoComsvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg, {
                      [sty.svgisSend]: hasVariant(variants, "isSend", "isSend")
                    })}
                    role={"img"}
                  />
                ) : null}
              </p.Stack>
            </div>
          </div>
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar", "svg"],
  avatar: ["avatar"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChatMessage__ArgProps,
      internalVariantPropNames: PlasmicChatMessage__VariantProps
    });

    return PlasmicChatMessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatMessage";
  } else {
    func.displayName = `PlasmicChatMessage.${nodeName}`;
  }
  return func;
}

export const PlasmicChatMessage = Object.assign(
  // Top-level PlasmicChatMessage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicChatMessage
    internalVariantProps: PlasmicChatMessage__VariantProps,
    internalArgProps: PlasmicChatMessage__ArgProps
  }
);

export default PlasmicChatMessage;
/* prettier-ignore-end */
