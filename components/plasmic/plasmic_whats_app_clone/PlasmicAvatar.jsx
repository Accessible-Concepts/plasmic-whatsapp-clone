// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: gM35gl7eyM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicAvatar.module.css"; // plasmic-import: gM35gl7eyM/css

export const PlasmicAvatar__VariantProps = new Array(
  "isEmpty",
  "color",
  "fullWidth"
);

export const PlasmicAvatar__ArgProps = new Array("url", "prefixText");

function PlasmicAvatar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor__1]: hasVariant(variants, "color", "_1"),
          [sty.rootcolor__2]: hasVariant(variants, "color", "_2"),
          [sty.rootcolor__3]: hasVariant(variants, "color", "_3"),
          [sty.rootfullWidth]: hasVariant(variants, "fullWidth", "fullWidth"),
          [sty.rootisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
        }
      )}
    >
      {(
        hasVariant(variants, "color", "_3")
          ? true
          : hasVariant(variants, "color", "_2")
          ? true
          : hasVariant(variants, "color", "_1")
          ? true
          : hasVariant(variants, "isEmpty", "isEmpty")
          ? true
          : true
      ) ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgcolor__1]: hasVariant(variants, "color", "_1"),
            [sty.imgcolor__2]: hasVariant(variants, "color", "_2"),
            [sty.imgcolor__3]: hasVariant(variants, "color", "_3"),
            [sty.imgfullWidth]: hasVariant(variants, "fullWidth", "fullWidth"),
            [sty.imgisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
          })}
          displayHeight={
            hasVariant(variants, "fullWidth", "fullWidth") ? "100%" : "60px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(variants, "fullWidth", "fullWidth") ? "100%" : "60px"
          }
          loading={"lazy"}
          src={args.url}
        />
      ) : null}
      {(
        hasVariant(variants, "color", "_3")
          ? true
          : hasVariant(variants, "color", "_2")
          ? true
          : hasVariant(variants, "color", "_1")
          ? true
          : hasVariant(variants, "isEmpty", "isEmpty")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxcolor__1]: hasVariant(variants, "color", "_1"),
            [sty.freeBoxcolor__2]: hasVariant(variants, "color", "_2"),
            [sty.freeBoxcolor__3]: hasVariant(variants, "color", "_3"),
            [sty.freeBoxfullWidth]: hasVariant(
              variants,
              "fullWidth",
              "fullWidth"
            ),

            [sty.freeBoxisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "A",
            value: args.prefixText,
            className: classNames(sty.slotTargetPrefixText, {
              [sty.slotTargetPrefixTextisEmpty]: hasVariant(
                variants,
                "isEmpty",
                "isEmpty"
              )
            })
          })}
        </div>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAvatar__ArgProps,
      internalVariantPropNames: PlasmicAvatar__VariantProps
    });

    return PlasmicAvatar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAvatar";
  } else {
    func.displayName = `PlasmicAvatar.${nodeName}`;
  }
  return func;
}

export const PlasmicAvatar = Object.assign(
  // Top-level PlasmicAvatar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicAvatar
    internalVariantProps: PlasmicAvatar__VariantProps,
    internalArgProps: PlasmicAvatar__ArgProps
  }
);

export default PlasmicAvatar;
/* prettier-ignore-end */
