// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kzkatsDCvzPQVqDSnS1EKs
// Component: qgrz47A8td
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: gM35gl7eyM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_plasmic_whats_app_clone.module.css"; // plasmic-import: kzkatsDCvzPQVqDSnS1EKs/projectcss
import sty from "./PlasmicChatListItem.module.css"; // plasmic-import: qgrz47A8td/css

export const PlasmicChatListItem__VariantProps = new Array("isSelected");

export const PlasmicChatListItem__ArgProps = new Array(
  "roomName",
  "lastMessageContent",
  "avatarUrl"
);

function PlasmicChatListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSelected]: hasVariant(variants, "isSelected", "isSelected")
        }
      )}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
        color={"_2"}
        isEmpty={true}
        url={args.avatarUrl}
      />

      <div className={classNames(projectcss.all, sty.freeBox___9WG)}>
        <div className={classNames(projectcss.all, sty.freeBox__y2WVl)}>
          {p.renderPlasmicSlot({
            defaultContents: "Username",
            value: args.roomName,
            className: classNames(sty.slotTargetRoomName)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__fsj8G)}>
          {p.renderPlasmicSlot({
            defaultContents: "Last message content. blah blah blah",
            value: args.lastMessageContent,
            className: classNames(sty.slotTargetLastMessageContent)
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar"],
  avatar: ["avatar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChatListItem__ArgProps,
      internalVariantPropNames: PlasmicChatListItem__VariantProps
    });

    return PlasmicChatListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatListItem";
  } else {
    func.displayName = `PlasmicChatListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicChatListItem = Object.assign(
  // Top-level PlasmicChatListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    // Metadata about props expected for PlasmicChatListItem
    internalVariantProps: PlasmicChatListItem__VariantProps,
    internalArgProps: PlasmicChatListItem__ArgProps
  }
);

export default PlasmicChatListItem;
/* prettier-ignore-end */
